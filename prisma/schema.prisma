generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            String         @id @default(uuid())
  email         String         @unique
  firstname     String
  lastname      String
  username      String
  phonenumber   String         @unique
  password      String
  role          String?        @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshToken  String?
  refreshTokens RefreshToken[]
  sales         sale[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model products {
  id          String     @id @default(uuid())
  productname String     @unique
  price       Int
  details     String
  quantity    Int        @default(5)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  saleItems   saleitem[]
}

model customers {
  id          String   @id @default(uuid())
  name        String
  location    String
  details     String?
  phonenumber String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sales       sale[]
}

model sale {
  id         String     @id @default(uuid())
  createdAt  DateTime   @default(now())
  type       String?    @default("credit")
  total      Int
  balance    Int
  userId     String
  customerId String
  payments   payment[]
  customer   customers  @relation(fields: [customerId], references: [id])
  user       users      @relation(fields: [userId], references: [id])
  saleItems  saleitem[]
}

model saleitem {
  id        String   @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Int
  product   products @relation(fields: [productId], references: [id])
  sale      sale     @relation(fields: [saleId], references: [id])
}

model payment {
  id        String   @id @default(uuid())
  amount    Int
  createdAt DateTime @default(now())
  saleId    String
  sale      sale     @relation(fields: [saleId], references: [id])
}
