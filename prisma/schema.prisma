generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model users {
  id            String         @id @default(uuid())
  email         String         @unique
  firstname     String
  lastname      String
  username      String
  phonenumber   String         @unique
  password      String
  role          String?        @default("user")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  refreshToken  String?
  refreshTokens RefreshToken[]
  sales         sale[]
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  createdAt DateTime @default(now())
  expiresAt DateTime
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model products {
  id             String          @id @default(uuid())
  productname    String          @unique
  price          Int
  details        String
  category       String
  quantity       Int             @default(5)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  saleItems      saleitem[]
  productReturns productreturn[]
}
model customers {
  id             String          @id @default(uuid())
  name           String
  location       String
  details        String?
  phonenumber    String          @unique
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  sales          sale[]          @relation("CustomerSales")
  productReturns productreturn[]
}

model sale {
  id             String          @id @default(uuid())
  createdAt      DateTime        @default(now())
  type           String?         @default("credit")
  total          Int
  balance        Int
  userId         String
  customerId     String
  payments       payment[]
  saleItems      saleitem[]
  productReturns productreturn[]

  customer       customers       @relation("CustomerSales", fields: [customerId], references: [id], onDelete: Cascade)
  user           users           @relation(fields: [userId], references: [id])
}

model payment {
  id        String        @id @default(uuid())
  amount    Int
  method    PaymentMethod @default(CREDIT)
  createdAt DateTime      @default(now())
  saleId    String

  sale      sale          @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

model saleitem {
  id        String   @id @default(uuid())
  saleId    String
  productId String
  quantity  Int
  unitPrice Int
  createdAt DateTime @default(now())

  sale      sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  product   products @relation(fields: [productId], references: [id])
}

model productreturn {
  id           String   @id @default(uuid())
  customerId   String
  productId    String
  saleId       String
  quantity     Int
  refundAmount Int
  createdAt    DateTime @default(now())

  customer customers @relation(fields: [customerId], references: [id], onDelete: Cascade)
  product  products  @relation(fields: [productId], references: [id])
  sale     sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
}

enum PaymentMethod {
  CREDIT // default
  CASH
  MPESA
  PAYBILL
  CHEQUE
  BANK
}
